#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('chatbotbackend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
/**
 * Listen on provided port, on all network interfaces.
 */
var dataService = require('../services/data.service.js');
var io = require('socket.io').listen(server);

const usersColors = {};

io.on('connection', (socket) => {

  console.log('---user connected---');
  setTimeout(function(){ 
    let userPref = dataService.getUsersPref();
    socket.emit('post', { type: 'user-pref', text: userPref });
   }, 3000);
     

  socket.on('disconnect', function() {
      console.log('user disconnected');
  });

  socket.on('add-post', (post) => {
      // console.log('on add-post', post);
      dataService.addNewPost(post, function(newPost){
        io.emit('post', { type: 'add-post', text: post });
      });
  });

  socket.on('update-post', (message) => {
    // console.log('update-post', message);
    dataService.updatePost(message.postId, message.comment, function(newPost) {
      var obj = {
        postId : message.postId,
        newPost: newPost
      }
      io.emit('post', { type: 'update-post', text: obj });
    });
  });

  socket.on('update-user', (message) => {
    usersColors[message.userName] = message.color;
    dataService.updateUser(message.userName, message.color);
    let userPref = dataService.getUsersPref();
    io.emit('post', { type: 'user-pref', text: userPref });
  });
});

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
